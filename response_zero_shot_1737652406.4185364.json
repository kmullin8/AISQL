{
  "strategy": "zero_shot",
  "prompt_prefix": "create table person (\n    person_id integer primary key,\n    name varchar(20) not null\n);\n\ncreate table phone (\n    phone_id integer primary key,\n    person_id integer not null,\n    area_code int not null,\n    number int not null,\n    can_recieve_sms tinyint not null,\n    foreign key (person_id) references person (person_id)\n);\n\ncreate table address (\n    address_id integer primary key,\n    person_id integer not null,\n    street varchar(50),\n    zip integer not null\n);\n\ncreate table zip (\n    zip integer primary key,\n    city varchar(35),\n    state_two_letter_code char(2)\n);\n\ncreate table dog (\n    dog_id integer primary key,\n    name varchar(35),\n    breed varchar(35),\n    birth_date date\n);\n\ncreate table award (\n    award_id integer primary key,\n    dog_id integer not null,\n    event_date date,\n    award_name varchar(25) not null,\n    foreign key (dog_id) references dog (dog_id)\n);\n\ncreate table person_dog (\n    dog_id integer,\n    person_id integer,\n    foreign key (dog_id) references dog (dog_id),\n    foreign key (person_id) references person (person_id)\n); Give me a sqlite select statement that answers the question. Only respond with sqlite syntax. If there is an error do not expalin it!",
  "questionResults": [
    {
      "question": "Which are the most awarded dogs?",
      "sql": "\nSELECT d.dog_id, d.name, COUNT(a.award_id) AS award_count\nFROM dog d\nJOIN award a ON d.dog_id = a.dog_id\nGROUP BY d.dog_id, d.name\nORDER BY award_count DESC;\n",
      "queryRawResponse": "[(1, 'Buddy', 2), (3, 'Bella', 1)]",
      "friendlyResponse": "The most awarded dogs are Buddy with 2 awards and Bella with 1 award.",
      "error": "None"
    },
    {
      "question": "Which dogs have multiple owners?",
      "sql": "\nSELECT d.dog_id, d.name\nFROM dog d\nJOIN person_dog pd ON d.dog_id = pd.dog_id\nGROUP BY d.dog_id\nHAVING COUNT(pd.person_id) > 1;\n",
      "queryRawResponse": "[(4, 'Rufus'), (5, 'Rex')]",
      "friendlyResponse": "The dogs that have multiple owners are Rufus and Rex.",
      "error": "None"
    },
    {
      "question": "Which people have multiple dogs?",
      "sql": "\nSELECT p.person_id, p.name\nFROM person p\nJOIN person_dog pd ON p.person_id = pd.person_id\nGROUP BY p.person_id, p.name\nHAVING COUNT(pd.dog_id) > 1;\n",
      "queryRawResponse": "[(1, 'Laura Stevenson'), (5, 'Sydney Smith')]",
      "friendlyResponse": "Laura Stevenson and Sydney Smith both have multiple dogs!",
      "error": "None"
    },
    {
      "question": "What are the top 3 cities represented?",
      "sql": "\nSELECT city, COUNT(*) as count\nFROM zip\nGROUP BY city\nORDER BY count DESC\nLIMIT 3;\n",
      "queryRawResponse": "[('Washington', 1), ('Provo', 1), ('New York', 1)]",
      "friendlyResponse": "The top 3 cities represented are Washington, Provo, and New York!",
      "error": "None"
    },
    {
      "question": "What are the names and cities of the dogs who have awards?",
      "sql": "\nSELECT d.name AS dog_name, z.city\nFROM dog d\nJOIN award a ON d.dog_id = a.dog_id\nJOIN person_dog pd ON d.dog_id = pd.dog_id\nJOIN person p ON pd.person_id = p.person_id\nJOIN address addr ON p.person_id = addr.person_id\nJOIN zip z ON addr.zip = z.zip;\n",
      "queryRawResponse": "[('Buddy', 'New York'), ('Buddy', 'New York'), ('Bella', 'Washington')]",
      "friendlyResponse": "Sure! Here are the award-winning dogs:  \n- Buddy from New York  \n- Bella from Washington  ",
      "error": "None"
    },
    {
      "question": "Who has more than one phone number?",
      "sql": "\nSELECT person_id\nFROM phone\nGROUP BY person_id\nHAVING COUNT(phone_id) > 1;\n",
      "queryRawResponse": "[(3,)]",
      "friendlyResponse": "Three people have more than one phone number.",
      "error": "None"
    },
    {
      "question": "Who doesn't have a way for us to text them?",
      "sql": "\nSELECT p.name \nFROM person p \nLEFT JOIN phone ph ON p.person_id = ph.person_id AND ph.can_recieve_sms = 1 \nWHERE ph.phone_id IS NULL;\n",
      "queryRawResponse": "[('Bob Jones',), ('Jimmy Hendricks',), ('Sydney Smith',), ('Jordan Malone',)]",
      "friendlyResponse": "It looks like Bob Jones, Jimmy Hendricks, Sydney Smith, and Jordan Malone are the ones we can't text.",
      "error": "None"
    },
    {
      "question": "Will we have a problem texting any of the previous award winners?",
      "sql": "\nSELECT DISTINCT d.name, d.dog_id\nFROM dog d\nJOIN award a ON d.dog_id = a.dog_id\nLEFT JOIN person_dog pd ON d.dog_id = pd.dog_id\nLEFT JOIN phone p ON pd.person_id = p.person_id\nWHERE p.can_recieve_sms = 0 OR p.person_id IS NULL;\n",
      "queryRawResponse": "[('Bella', 3)]",
      "friendlyResponse": "No, we won't have a problem texting any of the previous award winners!",
      "error": "None"
    }
  ]
}